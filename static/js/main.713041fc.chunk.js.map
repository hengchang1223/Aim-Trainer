{"version":3,"sources":["assets/red_dot.png","components/RedDot/RedDot.js","components/Track/PlayTrack.js","components/Help/Help.js","components/Track/Track.js","components/Aim/PlayAim.js","components/Aim/Aim.js","App.js","index.js"],"names":["module","exports","RedDot","unselectable","className","src","redDot","alt","width","height","PlayTrack","startTimer","setState","timerTime","state","timerStart","timer","setInterval","newTime","clearInterval","stopTracking","alert","trackTime","hoverOnHandler","trackStart","Date","now","track","hoverOutHandler","startTracking","moving","x","posX","velocity","Math","sin","direction","y","posY","cos","PI","changeDirection","random","this","trackCentiseconds","floor","slice","trackSeconds","left","top","onMouseEnter","onMouseLeave","style","padding","position","Component","Help","props","text","Track","basename","to","path","component","render","PlayAim","timerOn","success","shootHandler","onClick","Aim","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.713041fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red_dot.0773aac1.png\";","import React from 'react';\nimport redDot from '../../assets/red_dot.png';\n\n\nconst RedDot = () => {\n    return <div unselectable=\"on\" className=\"unselectable\"><img src={redDot} alt='RedDot' width='20' height='20' /></div>\n}\n\nexport default RedDot;","import React, { Component } from 'react';\nimport RedDot from '../RedDot/RedDot';\n\nimport '../../App.css';\n\nclass PlayTrack extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // timerOn: false,\n            timerStart: 30000,\n            timerTime: 30000,\n            // trackOn: false,\n            trackStart: 0,\n            trackTime: 0,\n            // trackStart: false,\n            posX: 800,\n            posY: 450,\n            velocity: 5,\n            direction: Math.PI / 2\n        }\n        this.startTracking();\n        this.startTimer();\n    }\n\n    startTimer = () => {\n        this.setState({\n        //   timerOn: true,\n          timerTime: this.state.timerTime,\n          timerStart: this.state.timerTime\n        });\n\n        this.timer = setInterval(() => {\n          const newTime = this.state.timerTime - 10;\n          if (newTime >= 0) {\n            this.setState({\n              timerTime: newTime\n            });\n          } else {\n            clearInterval(this.timer);\n            this.stopTracking();\n            // this.setState({ timerOn: false });\n            // let message = 'Success: ' + this.state.success.toString();\n            alert('Time On Track: ' + this.state.trackTime);\n          }\n        }, 10);\n      };\n\n    hoverOnHandler = () => {\n        this.setState({\n            // timerOn: true,\n            // timerTime: this.state.timerTime,\n            // timerStart: Date.now() - this.state.timerTime\n            trackTime: this.state.trackTime,\n            trackStart: Date.now() - this.state.trackTime\n        });\n\n        this.track = setInterval(() => {\n            this.setState({\n                trackTime: Date.now() - this.state.trackStart\n            });\n        }, 10);\n\n    };\n\n    hoverOutHandler = () => {\n        // this.setState({\n        //     timerOn: false\n        // });\n        // clearInterval(this.timer);\n        clearInterval(this.track);\n    };\n\n    // resetTimer = () => {\n    //     this.setState({\n    //       timerStart: 0,\n    //       timerTime: 0\n    //     });\n    // };\n\n    startTracking = () => {\n        // this.setState({\n        //     trackOn: true\n        // });\n        \n        this.moving = setInterval(() =>{\n            var x = this.state.posX + this.state.velocity * Math.sin(this.state.direction);\n            var y = this.state.posY + this.state.velocity * Math.cos(this.state.direction);\n            if ( x < 10 || x > 1590 ) {\n                this.setState({\n                    direction: Math.PI * 2 - this.state.direction\n                });\n            } else if ( y < 10 || y > 890 ) {\n                this.setState({\n                    direction: Math.PI - this.state.direction\n                });\n            } else {\n                this.setState({\n                    posX: x,\n                    posY: y\n                });\n            };\n        }, 20);\n\n        this.changeDirection = setInterval(() =>{\n            this.setState({\n                direction: Math.random() * Math.PI * 2\n            });\n        }, 2000);\n    };\n\n    stopTracking = () => {\n        this.setState({\n            // trackOn: false,\n            posX: 800,\n            posY: 450\n        });\n        clearInterval(this.moving);\n        clearInterval(this.changeDirection);\n    };\n    \n    render() {\n\n        const { trackTime } = this.state;\n        let trackCentiseconds = (\"0\" + (Math.floor(trackTime / 10) % 100)).slice(-2);\n        let trackSeconds = (\"0\" + (Math.floor(trackTime / 1000) % 60)).slice(-2);\n        // let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n        // let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n        // let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n        // let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n        let left = this.state.posX + 'px';\n        let top = this.state.posY + 'px';\n\n        return (\n            <div className=\"outerContainer\">\n                <div>\n                    {/* <button onClick={this.startTracking}>Start</button> */}\n                    {/* <button onClick={this.stopTracking}>Stop</button> */}\n\n                    {/* {this.state.timerOn === false && this.state.timerTime > 0 && (\n                    // <button onClick={this.resetTimer}>Reset</button>\n                )} */}\n                </div>\n                {/* <div>\n                    {hours} : {minutes} : {seconds} : {centiseconds}\n                </div> */}\n                <div>\n                    {trackSeconds} : {trackCentiseconds}\n                    {/* <br></br>\n                    {seconds} : {centiseconds} */}\n                </div>\n\n                <div className=\"container\">\n                    <div\n                    // onMouseEnter={this.state.trackStart && this.hoverOnHandler}\n                    // onMouseLeave={this.state.trackStart && this.hoverOutHandler}\n                    onMouseEnter={this.hoverOnHandler}\n                    onMouseLeave={this.hoverOutHandler}\n                    style={{padding: '0px', left, top, position: 'absolute'}}\n                    >\n                        <RedDot />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PlayTrack;\n","import React from 'react';\nimport '../../App.css';\n\nconst Help = (props) => {\n    return (\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <h1>Help</h1>\n                <h2>{props.text}</h2>\n            </div>\n        </div>\n    )\n}\n\nexport default Help;","// // import React, { Component } from 'react';\n// import React from 'react';\n// // import RedDot from '../RedDot/RedDot';\n\n// import '../../App.css';\n\n// class Track extends Component {\n//     state = {\n//         timerOn: false,\n//         timerStart: 0,\n//         timerTime: 0,\n//         trackStart: false,\n//         posX: 800,\n//         posY: 450,\n//         velocity: 5,\n//         direction: Math.PI / 2\n//     }\n\n//     hoverOnHandler = () => {\n//         this.setState({\n//             timerOn: true,\n//             timerTime: this.state.timerTime,\n//             timerStart: Date.now() - this.state.timerTime\n//         });\n\n//         this.timer = setInterval(() => {\n//             this.setState({\n//                 timerTime: Date.now() - this.state.timerStart\n//             });\n//         }, 10);\n\n//     };\n\n//     hoverOutHandler = () => {\n//         this.setState({\n//             timerOn: false\n//         });\n//         clearInterval(this.timer);\n//     };\n\n//     resetTimer = () => {\n//         this.setState({\n//           timerStart: 0,\n//           timerTime: 0\n//         });\n//     };\n\n//     startTracking = () => {\n//         this.setState({\n//             trackStart: true\n//         });\n        \n//         this.moving = setInterval(() =>{\n//             var x = this.state.posX + this.state.velocity * Math.sin(this.state.direction);\n//             var y = this.state.posY + this.state.velocity * Math.cos(this.state.direction);\n//             if ( x < 10 || x > 1590 ) {\n//                 this.setState({\n//                     direction: Math.PI * 2 - this.state.direction\n//                 });\n//             } else if ( y < 10 || y > 890 ) {\n//                 this.setState({\n//                     direction: Math.PI - this.state.direction\n//                 });\n//             } else {\n//                 this.setState({\n//                     posX: x,\n//                     posY: y\n//                 });\n//             };\n//         }, 20);\n\n//         this.changeDirection = setInterval(() =>{\n//             this.setState({\n//                 direction: Math.random() * Math.PI * 2\n//             });\n//         }, 2000);\n//     };\n\n//     stopTracking = () => {\n//         this.setState({\n//             trackStart: false,\n//             posX: 800,\n//             posY: 450\n//         });\n//         clearInterval(this.moving);\n//         clearInterval(this.changeDirection);\n//     };\n    \n//     render() {\n\n//         const { timerTime } = this.state;\n//         let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n//         let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n//         let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n//         let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n//         let left = this.state.posX + 'px';\n//         let top = this.state.posY + 'px';\n\n//         return (\n//             <div className=\"outerContainer\">\n                \n//                 {/* <div>\n//                     <button onClick={this.startTracking}>Start</button>\n//                     <button onClick={this.stopTracking}>Stop</button>\n//                     {this.state.timerOn === false && this.state.timerTime > 0 && (\n//                     <button onClick={this.resetTimer}>Reset</button>\n//                 )}\n//                 </div>\n//                 <div>\n//                     {hours} : {minutes} : {seconds} : {centiseconds}\n//                 </div>\n\n//                 <div className=\"container\">\n//                     <div\n//                     onMouseEnter={this.state.trackStart && this.hoverOnHandler}\n//                     onMouseLeave={this.state.trackStart && this.hoverOutHandler}\n//                     style={{padding: '0px', left, top, position: 'absolute'}}\n//                     >\n//                         <RedDot />\n//                     </div>\n//                 </div> */}\n//             </div>\n//         )\n//     }\n// }\n\n// export default Track;\nimport React from 'react';\nimport PlayTrack from './PlayTrack';\nimport Help from '../Help/Help';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport '../../App.css';\n\nconst Track = () => {\n    var helpText = \"After hitting Play button, you have 30 \\n\\nseconds to track the target. Try to keep\\n\\n track of the target as long as possible.\\n\\n Good Luck!\"\n\n    return (\n        <HashRouter basename=\"/Track/\">\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                            <h1>Track Training</h1>\n                            <Link className=\"gameSetting\" to='/PlayTrack/'>\n                                <h2>Play</h2>\n                            </Link>\n                    \n                            <Link className=\"gameSetting\" to='/Help/'>\n                                <h2>Help</h2>\n                            </Link>\n                    </div>\n                    <Route path=\"/PlayTrack\" component={PlayTrack} />\n                    <Route \n                    path=\"/Help\" \n                    render={(props) => (\n                        <Help {...props} text={helpText}/>\n                    )}\n                    />\n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default Track;","import React, { Component } from 'react';\nimport RedDot from '../RedDot/RedDot';\n\nimport '../../App.css';\n\n\nclass PlayAim extends Component {\n    constructor() {\n        super();\n        this.state = {\n            timerOn: true,\n            timerStart: 30000,\n            timerTime: 30000,\n            posX: 800,\n            posY: 450,\n            success: 0\n        };\n        this.startTimer();\n    }\n\n    startTimer = () => {\n        this.setState({\n          timerOn: true,\n          timerTime: this.state.timerTime,\n          timerStart: this.state.timerTime\n        });\n        this.timer = setInterval(() => {\n          const newTime = this.state.timerTime - 10;\n          if (newTime >= 0) {\n            this.setState({\n              timerTime: newTime\n            });\n          } else {\n            clearInterval(this.timer);\n            this.setState({\n                timerOn: false,\n                posX: 800,\n                posY: 450\n            });\n            alert('Success: ' + this.state.success);\n          }\n        }, 10);\n      };\n    \n    //   stopTimer = () => {\n    //     clearInterval(this.timer);\n    //     this.setState({ timerOn: false });\n    //     alert('Success: ' + this.state.success);\n    //   };\n\n    //   resetTimer = () => {\n    //     if (this.state.timerOn === false) {\n    //       this.setState({\n    //         timerTime: 30000,\n    //         timerStart: 30000,\n    //         posX: 800,\n    //         posY: 450,\n    //         success: 0\n    //       });\n    //     }\n    //   };\n    \n    //   adjustTimer = input => {\n    //     const { timerTime, timerOn } = this.state;\n    //     if (!timerOn) {\n    //       if (input === \"incHours\" && timerTime + 3600000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 3600000 });\n    //       } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 3600000 });\n    //       } else if (input === \"incMinutes\" && timerTime + 60000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 60000 });\n    //       } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 60000 });\n    //       } else if (input === \"incSeconds\" && timerTime + 1000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 1000 });\n    //       } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 1000 });\n    //       }\n    //     }\n    //   };\n\n    shootHandler = () => {\n        this.setState({\n            posX: 10 + Math.random() * 1580,\n            posY: 10 + Math.random() * 880,\n            success: this.state.success + 1\n        })\n        // console.log(this.state.success);\n    }\n\n    render() {\n        // const { timerTime, timerStart, timerOn } = this.state;\n        const { success } = this.state;\n        // let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n        // let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n        // let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n        let left = this.state.posX + 'px';\n        let top = this.state.posY + 'px';\n    \n        return (\n            <div className=\"outerContainer\">\n\n                {/* <div className=\"Countdown\"> */}\n                    {/* <div className=\"Countdown-display\">\n                    <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"incMinutes\")}>\n                        &#8679;\n                    </button>\n                    <button onClick={() => this.adjustTimer(\"incSeconds\")}>\n                        &#8679;\n                    </button> */}\n            \n                    {/* <div className=\"Countdown-time\"> */}\n                        {/* {hours} : {minutes} : {seconds} */}\n                    {/* </div> */}\n            \n                    {/* <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button>\n                    <button onClick={() => this.adjustTimer(\"decMinutes\")}>\n                        &#8681;\n                    </button>\n                    <button onClick={() => this.adjustTimer(\"decSeconds\")}>\n                        &#8681;\n                    </button>\n                    </div> */}\n            \n                    {/* {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n                    <button className=\"Button-start\" onClick={this.startTimer}>\n                        Start\n                    </button>\n                    )}\n                    {timerOn === true && timerTime >= 1000 && (\n                    <button className=\"Button-stop\" onClick={this.stopTimer}>\n                        Stop\n                    </button>\n                    )}\n                    {timerOn === false &&\n                    (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                        <button className=\"Button-start\" onClick={this.startTimer}>\n                        Resume\n                        </button>\n                    )}\n            \n                    {(timerOn === false || timerTime < 1000) &&\n                    (timerStart !== timerTime && timerStart > 0) && (\n                        <button className=\"Button-reset\" onClick={this.resetTimer}>\n                        Reset\n                        </button>\n                    )}\n                </div> */}\n\n                <div>\n                    {success}\n                </div>\n\n                <div className=\"container\">\n                    <div \n                    onClick={this.state.timerOn && this.shootHandler}\n                    style={{padding: '0px', left, top, position: 'absolute'}}\n                    >\n                        <RedDot />\n                    </div>\n                </div>\n            </div>\n        );\n      }\n}\n\nexport default PlayAim;","// import React, { Component } from 'react';\n// import RedDot from '../RedDot/RedDot';\n\n// import '../../App.css';\n\n\n// class Aim extends Component {\n//     state = {\n//         timerOn: false,\n//         timerStart: 30000,\n//         timerTime: 30000,\n//         posX: 800,\n//         posY: 450,\n//         success: 0\n//     };\n\n//     startTimer = () => {\n//         this.setState({\n//           timerOn: true,\n//           timerTime: this.state.timerTime,\n//           timerStart: this.state.timerTime\n//         });\n//         this.timer = setInterval(() => {\n//           const newTime = this.state.timerTime - 10;\n//           if (newTime >= 0) {\n//             this.setState({\n//               timerTime: newTime\n//             });\n//           } else {\n//             clearInterval(this.timer);\n//             this.setState({ timerOn: false });\n//             // let message = 'Success: ' + this.state.success.toString();\n//             alert('Success: ' + this.state.success);\n//           }\n//         }, 10);\n//       };\n    \n//       stopTimer = () => {\n//         clearInterval(this.timer);\n//         this.setState({ timerOn: false });\n//         // let message = 'Success: ' + this.state.success.toString();\n//         alert('Success: ' + this.state.success);\n//       };\n\n//       resetTimer = () => {\n//         if (this.state.timerOn === false) {\n//           this.setState({\n//             timerTime: 30000,\n//             timerStart: 30000,\n//             posX: 800,\n//             posY: 450,\n//             success: 0\n//           });\n//         }\n//       };\n    \n//     //   adjustTimer = input => {\n//     //     const { timerTime, timerOn } = this.state;\n//     //     if (!timerOn) {\n//     //       if (input === \"incHours\" && timerTime + 3600000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 3600000 });\n//     //       } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 3600000 });\n//     //       } else if (input === \"incMinutes\" && timerTime + 60000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 60000 });\n//     //       } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 60000 });\n//     //       } else if (input === \"incSeconds\" && timerTime + 1000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 1000 });\n//     //       } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 1000 });\n//     //       }\n//     //     }\n//     //   };\n\n//     shootHandler = () => {\n//         this.setState({\n//             posX: 10 + Math.random() * 1580,\n//             posY: 10 + Math.random() * 880,\n//             success: this.state.success + 1\n//         })\n//         // console.log(this.state.success);\n//     }\n\n//     render() {\n//         const { timerTime, timerStart, timerOn } = this.state;\n//         let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n//         let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n//         let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n//         let left = this.state.posX + 'px';\n//         let top = this.state.posY + 'px';\n    \n//         return (\n//             <div className=\"outerContainer\">\n\n//                 <div className=\"Countdown\">\n//                     {/* <div className=\"Countdown-display\">\n//                     <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n//                     <button onClick={() => this.adjustTimer(\"incMinutes\")}>\n//                         &#8679;\n//                     </button>\n//                     <button onClick={() => this.adjustTimer(\"incSeconds\")}>\n//                         &#8679;\n//                     </button> */}\n            \n//                     {/* <div className=\"Countdown-time\"> */}\n//                         {hours} : {minutes} : {seconds}\n//                     {/* </div> */}\n            \n//                     {/* <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button>\n//                     <button onClick={() => this.adjustTimer(\"decMinutes\")}>\n//                         &#8681;\n//                     </button>\n//                     <button onClick={() => this.adjustTimer(\"decSeconds\")}>\n//                         &#8681;\n//                     </button>\n//                     </div> */}\n            \n//                     {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n//                     <button className=\"Button-start\" onClick={this.startTimer}>\n//                         Start\n//                     </button>\n//                     )}\n//                     {timerOn === true && timerTime >= 1000 && (\n//                     <button className=\"Button-stop\" onClick={this.stopTimer}>\n//                         Stop\n//                     </button>\n//                     )}\n//                     {timerOn === false &&\n//                     (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n//                         <button className=\"Button-start\" onClick={this.startTimer}>\n//                         Resume\n//                         </button>\n//                     )}\n            \n//                     {(timerOn === false || timerTime < 1000) &&\n//                     (timerStart !== timerTime && timerStart > 0) && (\n//                         <button className=\"Button-reset\" onClick={this.resetTimer}>\n//                         Reset\n//                         </button>\n//                     )}\n//                 </div>\n\n//                 <div className=\"container\">\n//                     <div \n//                     onClick={this.state.timerOn && this.shootHandler}\n//                     style={{padding: '0px', left, top, position: 'absolute'}}\n//                     >\n//                         <RedDot />\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//       }\n// }\n\n// export default Aim;\n\nimport React from \"react\";\nimport PlayAim from './PlayAim';\nimport {HashRouter, Route, Link} from 'react-router-dom';\nimport '../../App.css';\n\nimport Help from '../Help/Help';\n\nconst Aim = () => {\n    var helpText = \"After hitting Play button, you have 30 \\n\\nseconds to shoot targets. Try to shoot\\n\\n as many targets as possible.\\n\\n Good Luck!\"\n\n    return (\n        <HashRouter basename=\"/Aim/\">\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                            <h1>Aim Training</h1>\n                            <Link className=\"gameSetting\" to='/PlayAim/'>\n                                <h2>Play</h2>\n                            </Link>\n                    \n                            <Link className=\"gameSetting\" to='/Help/'>\n                                <h2>Help</h2>\n                            </Link>\n                    </div>\n                    <Route path=\"/PlayAim\" component={PlayAim} />\n                    <Route \n                    path=\"/Help\" \n                    render={(props) => (\n                        <Help {...props} text={helpText}/>\n                    )}\n                    />\n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default Aim;","import React from 'react';\n\nimport Track from './components/Track/Track';\nimport Aim from './components/Aim/Aim'\n// import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\n// const Ready = () => {\n//     return (\n//         <div className=\"outerContainer\">\n//             <div className=\"container\">\n//                 <h1>Aim Trainer</h1>\n//                 <Link to={'/Track'}>\n//                     <button className=\"gameSetting\">Track Training</button>\n//                 </Link>\n                \n//                 <Link to={'/Aim'}>\n//                     <button className=\"gameSetting\">Aim Training</button>\n//                 </Link>\n//             </div>\n//         </div>\n//     );\n// };\n// import RedDot from './components/Track/RedDot';\n\nconst App = () => {\n    return (\n        <HashRouter basename='/'>\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                        <h1>Aim Trainer</h1>\n                            <Link className=\"gameSetting\" to='/Track'>\n                                <h2>Track Training</h2>\n                            </Link>\n                \n                            <Link className=\"gameSetting\" to='/Aim'>\n                                <h2>Aim Training</h2>\n                            </Link>\n                    </div>\n                </div>\n                <Route path=\"/Track\" component={Track} />\n                <Route path=\"/Aim\" component={Aim} />\n            </div>\n        </HashRouter>\n    )\n    // <Router>\n    //     <Route path=\"/\" exact component={Ready} />\n    //     <Route path=\"/Track\" component={Track} />\n    //     <Route path=\"/Aim\" component={Aim} />\n    // </Router>\n    \n};\n\n// class App extends Component {\n//     render() {\n//         return (\n//             <div >\n//                 {/* <Track /> */}\n//                 <Aim />\n//                 {/* <RedDot /> */}\n//             </div>\n//         )\n//     }\n// }\n\nexport default App;\n\n// export default class App extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <RedDot\n//                 src='./components/Track/red_dot.jpg'\n//                 />\n//             </div>\n//         )\n//     }\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}