{"version":3,"sources":["assets/red_dot.png","components/RedDot/RedDot.js","components/Track/PlayTrack.js","components/Help/Help.js","components/Track/Track.js","components/Aim/PlayAim.js","components/Aim/Aim.js","App.js","index.js"],"names":["module","exports","RedDot","unselectable","className","src","redDot","alt","width","height","PlayTrack","props","startTimer","setState","timerTime","state","timerStart","timer","setInterval","newTime","clearInterval","stopTracking","alert","trackTime","hoverOnHandler","trackStart","Date","now","track","hoverOutHandler","startTracking","trackOn","moving","x","posX","velocity","Math","sin","direction","y","posY","cos","PI","changeDirection","random","handleKeyPressed","e","keyCode","keyPressed","this","document","addEventListener","removeEventListener","trackCentiseconds","floor","slice","trackSeconds","left","top","onMouseEnter","onMouseLeave","style","padding","position","to","Component","Help","basename","text","sourceName","Track","path","component","render","PlayAim","timerOn","success","shootHandler","onClick","Aim","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.66ee0f9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red_dot.0773aac1.png\";","import React from 'react';\nimport redDot from '../../assets/red_dot.png';\n\n\nconst RedDot = () => {\n    return <div unselectable=\"on\" className=\"unselectable\"><img src={redDot} alt='RedDot' width='20' height='20' /></div>\n}\n\nexport default RedDot;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport RedDot from '../RedDot/RedDot';\n// import Track from './Track';\n\nimport '../../App.css';\n\nclass PlayTrack extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // timerOn: false,\n            timerStart: 30000,\n            timerTime: 30000,\n            trackOn: false,\n            trackStart: 0,\n            trackTime: 0,\n            // trackStart: false,\n            posX: 800,\n            posY: 450,\n            velocity: 5,\n            direction: Math.PI / 2,\n            keyPressed: false\n        }\n        \n        // console.log(props);\n    };\n\n    componentDidMount() {\n        this.startTracking();\n        this.startTimer();\n        document.addEventListener('keydown', this.handleKeyPressed);\n    };\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPressed);\n    };\n\n    startTimer = () => {\n        this.setState({\n        //   timerOn: true,\n            // trackOn: true,\n            timerTime: this.state.timerTime,\n            timerStart: this.state.timerTime\n        });\n\n        this.timer = setInterval(() => {\n            const newTime = this.state.timerTime - 10;\n            if (newTime >= 0) {\n                this.setState({\n                    timerTime: newTime\n                });\n            } else {\n                clearInterval(this.timer);\n                this.stopTracking();\n                // this.setState({ trackOn: false });\n                // let message = 'Success: ' + this.state.success.toString();\n                alert('Time On Track: ' + this.state.trackTime);\n            }\n        }, 10);\n      };\n\n    hoverOnHandler = () => {\n        this.setState({\n            // timerOn: true,\n            // timerTime: this.state.timerTime,\n            // timerStart: Date.now() - this.state.timerTime\n            trackTime: this.state.trackTime,\n            trackStart: Date.now() - this.state.trackTime\n        });\n\n        this.track = setInterval(() => {\n            this.setState({\n                trackTime: Date.now() - this.state.trackStart\n            });\n        }, 10);\n\n    };\n\n    hoverOutHandler = () => {\n        // this.setState({\n        //     timerOn: false\n        // });\n        // clearInterval(this.timer);\n        clearInterval(this.track);\n    };\n\n    // resetTimer = () => {\n    //     this.setState({\n    //       timerStart: 0,\n    //       timerTime: 0\n    //     });\n    // };\n\n    startTracking = () => {\n        this.setState({\n            trackOn: true\n        });\n        \n        this.moving = setInterval(() =>{\n            var x = this.state.posX + this.state.velocity * Math.sin(this.state.direction);\n            var y = this.state.posY + this.state.velocity * Math.cos(this.state.direction);\n            if ( x < 10 || x > 1590 ) {\n                this.setState({\n                    direction: Math.PI * 2 - this.state.direction\n                });\n            } else if ( y < 10 || y > 890 ) {\n                this.setState({\n                    direction: Math.PI - this.state.direction\n                });\n            } else {\n                this.setState({\n                    posX: x,\n                    posY: y\n                });\n            };\n        }, 20);\n\n        this.changeDirection = setInterval(() =>{\n            this.setState({\n                direction: Math.random() * Math.PI * 2\n            });\n        }, 2000);\n    };\n\n    stopTracking = () => {\n        this.setState({\n            trackOn: false,\n            posX: 800,\n            posY: 450\n        });\n        clearInterval(this.moving);\n        clearInterval(this.changeDirection);\n    };\n\n    // handleKeyPressed = (e) => {\n    //     e.preventDefault();\n    //     // if (e.key === 'Enter') {\n    //     //     this.props.history.push('/Track');\n    //     // }\n    //     this.setState({\n    //         keyPressed: true\n    //     })\n    //     console.log(e);\n    // };\n    handleKeyPressed = (e) => {\n        if (e.keyCode === 27) {\n            this.setState({\n                keyPressed: true\n            });\n        };\n    };\n\n    \n    render() {\n        // const TrackPage = () => {\n        //     return <Track props={this.props} />\n        // }\n        const { trackTime, keyPressed } = this.state;\n        let trackCentiseconds = (\"0\" + (Math.floor(trackTime / 10) % 100)).slice(-2);\n        let trackSeconds = (\"0\" + (Math.floor(trackTime / 1000) % 60)).slice(-2);\n        // let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n        // let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n        // let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n        // let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n        let left = this.state.posX + 'px';\n        let top = this.state.posY + 'px';\n\n        return (\n            <div className=\"outerContainer\">\n                {/* <div> */}\n                    {/* <button onClick={this.startTracking}>Start</button> */}\n                    {/* <button onClick={this.stopTracking}>Stop</button> */}\n\n                    {/* {this.state.timerOn === false && this.state.timerTime > 0 && (\n                    // <button onClick={this.resetTimer}>Reset</button>\n                )} */}\n                    {/* {qPressed && (\n                        <Redirect to='/Track/' />\n                    )}\n                    <Route path=\"/Track/\" component={Track} /> */}\n                    {/* <Route path='/Track' component={TrackPage} /> */}\n                {/* </div> */}\n                {/* <div>\n                    {hours} : {minutes} : {seconds} : {centiseconds}\n                </div> */}\n                <div>\n                    {trackSeconds} : {trackCentiseconds}\n                    {/* <br></br>\n                    {seconds} : {centiseconds} */}\n                </div>\n\n                <div className=\"container\">\n                    <div\n                    // onMouseEnter={this.state.trackStart && this.hoverOnHandler}\n                    // onMouseLeave={this.state.trackStart && this.hoverOutHandler}\n                    onMouseEnter={this.state.trackOn && this.hoverOnHandler}\n                    onMouseLeave={this.state.trackOn && this.hoverOutHandler}\n                    style={{padding: '0px', left, top, position: 'absolute'}}\n                    >\n                        <RedDot />\n                    {keyPressed && (\n                        <Redirect to={'/Track'} />\n                    )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PlayTrack;\n","import React from 'react';\nimport { HashRouter, Link } from 'react-router-dom';\nimport '../../App.css';\n\nconst Help = (props) => {\n    return (\n        <HashRouter basename=\"/\">\n            <div className=\"outerContainer\">\n                <div className=\"container\">\n                    <h1>Help</h1>\n                    <h2>{props.text}</h2>\n                    <h2>{\"\\nPress Esc key to quit the game.\"}</h2>\n\n                    <Link className=\"gameSetting\" to={props.sourceName}>\n                        <h2>Return</h2>\n                    </Link>\n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default Help;","// // import React, { Component } from 'react';\n// import React from 'react';\n// // import RedDot from '../RedDot/RedDot';\n\n// import '../../App.css';\n\n// class Track extends Component {\n//     state = {\n//         timerOn: false,\n//         timerStart: 0,\n//         timerTime: 0,\n//         trackStart: false,\n//         posX: 800,\n//         posY: 450,\n//         velocity: 5,\n//         direction: Math.PI / 2\n//     }\n\n//     hoverOnHandler = () => {\n//         this.setState({\n//             timerOn: true,\n//             timerTime: this.state.timerTime,\n//             timerStart: Date.now() - this.state.timerTime\n//         });\n\n//         this.timer = setInterval(() => {\n//             this.setState({\n//                 timerTime: Date.now() - this.state.timerStart\n//             });\n//         }, 10);\n\n//     };\n\n//     hoverOutHandler = () => {\n//         this.setState({\n//             timerOn: false\n//         });\n//         clearInterval(this.timer);\n//     };\n\n//     resetTimer = () => {\n//         this.setState({\n//           timerStart: 0,\n//           timerTime: 0\n//         });\n//     };\n\n//     startTracking = () => {\n//         this.setState({\n//             trackStart: true\n//         });\n        \n//         this.moving = setInterval(() =>{\n//             var x = this.state.posX + this.state.velocity * Math.sin(this.state.direction);\n//             var y = this.state.posY + this.state.velocity * Math.cos(this.state.direction);\n//             if ( x < 10 || x > 1590 ) {\n//                 this.setState({\n//                     direction: Math.PI * 2 - this.state.direction\n//                 });\n//             } else if ( y < 10 || y > 890 ) {\n//                 this.setState({\n//                     direction: Math.PI - this.state.direction\n//                 });\n//             } else {\n//                 this.setState({\n//                     posX: x,\n//                     posY: y\n//                 });\n//             };\n//         }, 20);\n\n//         this.changeDirection = setInterval(() =>{\n//             this.setState({\n//                 direction: Math.random() * Math.PI * 2\n//             });\n//         }, 2000);\n//     };\n\n//     stopTracking = () => {\n//         this.setState({\n//             trackStart: false,\n//             posX: 800,\n//             posY: 450\n//         });\n//         clearInterval(this.moving);\n//         clearInterval(this.changeDirection);\n//     };\n    \n//     render() {\n\n//         const { timerTime } = this.state;\n//         let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n//         let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n//         let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n//         let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n//         let left = this.state.posX + 'px';\n//         let top = this.state.posY + 'px';\n\n//         return (\n//             <div className=\"outerContainer\">\n                \n//                 {/* <div>\n//                     <button onClick={this.startTracking}>Start</button>\n//                     <button onClick={this.stopTracking}>Stop</button>\n//                     {this.state.timerOn === false && this.state.timerTime > 0 && (\n//                     <button onClick={this.resetTimer}>Reset</button>\n//                 )}\n//                 </div>\n//                 <div>\n//                     {hours} : {minutes} : {seconds} : {centiseconds}\n//                 </div>\n\n//                 <div className=\"container\">\n//                     <div\n//                     onMouseEnter={this.state.trackStart && this.hoverOnHandler}\n//                     onMouseLeave={this.state.trackStart && this.hoverOutHandler}\n//                     style={{padding: '0px', left, top, position: 'absolute'}}\n//                     >\n//                         <RedDot />\n//                     </div>\n//                 </div> */}\n//             </div>\n//         )\n//     }\n// }\n\n// export default Track;\nimport React from 'react';\nimport PlayTrack from './PlayTrack';\nimport Help from '../Help/Help';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport '../../App.css';\n\nconst Track = () => {\n    var helpText = \"After hitting Play button, you have 30 \\n\\nseconds to track the target. Try to keep\\n\\n track of the target as long as possible.\\n\\n Good Luck!\"\n    var sourceName = \"/Track/\"\n\n    return (\n        <HashRouter basename=\"/\">\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                            <h1>Track Training</h1>\n                            <Link className=\"gameSetting\" to='/Track/PlayTrack/'>\n                                <h2>Play</h2>\n                            </Link>\n                    \n                            <Link className=\"gameSetting\" to='/Track/Help/'>\n                                <h2>Help</h2>\n                            </Link>\n\n                            <Link className=\"gameSetting\" to='/'>\n                                <h2>Return</h2>\n                            </Link>\n                    </div>\n                    <Route path=\"/Track/PlayTrack\" component={PlayTrack} />\n                    <Route \n                    path=\"/Track/Help\" \n                    render={(props) => (\n                        <Help {...props} text={helpText} sourceName={sourceName} />\n                    )}\n                    />\n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default Track;","import React, { Component } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport RedDot from '../RedDot/RedDot';\n\nimport '../../App.css';\n\n\nclass PlayAim extends Component {\n    constructor() {\n        super();\n        this.state = {\n            timerOn: true,\n            timerStart: 30000,\n            timerTime: 30000,\n            posX: 800,\n            posY: 450,\n            success: 0,\n            keyPressed: false\n        };\n    };\n\n    componentDidMount() {\n        this.startTimer();\n        document.addEventListener('keydown', this.handleKeyPressed);\n    };\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPressed);\n    };\n\n    startTimer = () => {\n        this.setState({\n          timerOn: true,\n          timerTime: this.state.timerTime,\n          timerStart: this.state.timerTime\n        });\n        this.timer = setInterval(() => {\n          const newTime = this.state.timerTime - 10;\n          if (newTime >= 0) {\n            this.setState({\n              timerTime: newTime\n            });\n          } else {\n            clearInterval(this.timer);\n            this.setState({\n                timerOn: false,\n                posX: 800,\n                posY: 450\n            });\n            alert('Success: ' + this.state.success);\n          }\n        }, 10);\n      };\n    \n    //   stopTimer = () => {\n    //     clearInterval(this.timer);\n    //     this.setState({ timerOn: false });\n    //     alert('Success: ' + this.state.success);\n    //   };\n\n    //   resetTimer = () => {\n    //     if (this.state.timerOn === false) {\n    //       this.setState({\n    //         timerTime: 30000,\n    //         timerStart: 30000,\n    //         posX: 800,\n    //         posY: 450,\n    //         success: 0\n    //       });\n    //     }\n    //   };\n    \n    //   adjustTimer = input => {\n    //     const { timerTime, timerOn } = this.state;\n    //     if (!timerOn) {\n    //       if (input === \"incHours\" && timerTime + 3600000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 3600000 });\n    //       } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 3600000 });\n    //       } else if (input === \"incMinutes\" && timerTime + 60000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 60000 });\n    //       } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 60000 });\n    //       } else if (input === \"incSeconds\" && timerTime + 1000 < 216000000) {\n    //         this.setState({ timerTime: timerTime + 1000 });\n    //       } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n    //         this.setState({ timerTime: timerTime - 1000 });\n    //       }\n    //     }\n    //   };\n\n    shootHandler = () => {\n        this.setState({\n            posX: 10 + Math.random() * 1580,\n            posY: 10 + Math.random() * 880,\n            success: this.state.success + 1\n        })\n        // console.log(this.state.success);\n    };\n\n    handleKeyPressed = (e) => {\n        if (e.keyCode === 27) {\n            this.setState({\n                keyPressed: true\n            });\n        };\n    };\n\n    render() {\n        // const { timerTime, timerStart, timerOn } = this.state;\n        const { success, keyPressed, posX, posY } = this.state;\n        // let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n        // let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n        // let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n        let left = posX + 'px';\n        let top = posY + 'px';\n    \n        return (\n            <div className=\"outerContainer\">\n\n                {/* <div className=\"Countdown\"> */}\n                    {/* <div className=\"Countdown-display\">\n                    <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"incMinutes\")}>\n                        &#8679;\n                    </button>\n                    <button onClick={() => this.adjustTimer(\"incSeconds\")}>\n                        &#8679;\n                    </button> */}\n            \n                    {/* <div className=\"Countdown-time\"> */}\n                        {/* {hours} : {minutes} : {seconds} */}\n                    {/* </div> */}\n            \n                    {/* <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button>\n                    <button onClick={() => this.adjustTimer(\"decMinutes\")}>\n                        &#8681;\n                    </button>\n                    <button onClick={() => this.adjustTimer(\"decSeconds\")}>\n                        &#8681;\n                    </button>\n                    </div> */}\n            \n                    {/* {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n                    <button className=\"Button-start\" onClick={this.startTimer}>\n                        Start\n                    </button>\n                    )}\n                    {timerOn === true && timerTime >= 1000 && (\n                    <button className=\"Button-stop\" onClick={this.stopTimer}>\n                        Stop\n                    </button>\n                    )}\n                    {timerOn === false &&\n                    (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                        <button className=\"Button-start\" onClick={this.startTimer}>\n                        Resume\n                        </button>\n                    )}\n            \n                    {(timerOn === false || timerTime < 1000) &&\n                    (timerStart !== timerTime && timerStart > 0) && (\n                        <button className=\"Button-reset\" onClick={this.resetTimer}>\n                        Reset\n                        </button>\n                    )}\n                </div> */}\n\n                <div>\n                    {success}\n                </div>\n\n                <div className=\"container\">\n                    <div \n                    onClick={this.state.timerOn && this.shootHandler}\n                    style={{padding: '0px', left, top, position: 'absolute'}}\n                    >\n                        <RedDot />\n                    </div>\n                    {keyPressed && (\n                        <Redirect to={'/Track'} />\n                    )}\n                </div>\n                \n            </div>\n        );\n      }\n}\n\nexport default PlayAim;","// import React, { Component } from 'react';\n// import RedDot from '../RedDot/RedDot';\n\n// import '../../App.css';\n\n\n// class Aim extends Component {\n//     state = {\n//         timerOn: false,\n//         timerStart: 30000,\n//         timerTime: 30000,\n//         posX: 800,\n//         posY: 450,\n//         success: 0\n//     };\n\n//     startTimer = () => {\n//         this.setState({\n//           timerOn: true,\n//           timerTime: this.state.timerTime,\n//           timerStart: this.state.timerTime\n//         });\n//         this.timer = setInterval(() => {\n//           const newTime = this.state.timerTime - 10;\n//           if (newTime >= 0) {\n//             this.setState({\n//               timerTime: newTime\n//             });\n//           } else {\n//             clearInterval(this.timer);\n//             this.setState({ timerOn: false });\n//             // let message = 'Success: ' + this.state.success.toString();\n//             alert('Success: ' + this.state.success);\n//           }\n//         }, 10);\n//       };\n    \n//       stopTimer = () => {\n//         clearInterval(this.timer);\n//         this.setState({ timerOn: false });\n//         // let message = 'Success: ' + this.state.success.toString();\n//         alert('Success: ' + this.state.success);\n//       };\n\n//       resetTimer = () => {\n//         if (this.state.timerOn === false) {\n//           this.setState({\n//             timerTime: 30000,\n//             timerStart: 30000,\n//             posX: 800,\n//             posY: 450,\n//             success: 0\n//           });\n//         }\n//       };\n    \n//     //   adjustTimer = input => {\n//     //     const { timerTime, timerOn } = this.state;\n//     //     if (!timerOn) {\n//     //       if (input === \"incHours\" && timerTime + 3600000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 3600000 });\n//     //       } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 3600000 });\n//     //       } else if (input === \"incMinutes\" && timerTime + 60000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 60000 });\n//     //       } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 60000 });\n//     //       } else if (input === \"incSeconds\" && timerTime + 1000 < 216000000) {\n//     //         this.setState({ timerTime: timerTime + 1000 });\n//     //       } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n//     //         this.setState({ timerTime: timerTime - 1000 });\n//     //       }\n//     //     }\n//     //   };\n\n//     shootHandler = () => {\n//         this.setState({\n//             posX: 10 + Math.random() * 1580,\n//             posY: 10 + Math.random() * 880,\n//             success: this.state.success + 1\n//         })\n//         // console.log(this.state.success);\n//     }\n\n//     render() {\n//         const { timerTime, timerStart, timerOn } = this.state;\n//         let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n//         let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n//         let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n//         let left = this.state.posX + 'px';\n//         let top = this.state.posY + 'px';\n    \n//         return (\n//             <div className=\"outerContainer\">\n\n//                 <div className=\"Countdown\">\n//                     {/* <div className=\"Countdown-display\">\n//                     <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n//                     <button onClick={() => this.adjustTimer(\"incMinutes\")}>\n//                         &#8679;\n//                     </button>\n//                     <button onClick={() => this.adjustTimer(\"incSeconds\")}>\n//                         &#8679;\n//                     </button> */}\n            \n//                     {/* <div className=\"Countdown-time\"> */}\n//                         {hours} : {minutes} : {seconds}\n//                     {/* </div> */}\n            \n//                     {/* <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button>\n//                     <button onClick={() => this.adjustTimer(\"decMinutes\")}>\n//                         &#8681;\n//                     </button>\n//                     <button onClick={() => this.adjustTimer(\"decSeconds\")}>\n//                         &#8681;\n//                     </button>\n//                     </div> */}\n            \n//                     {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n//                     <button className=\"Button-start\" onClick={this.startTimer}>\n//                         Start\n//                     </button>\n//                     )}\n//                     {timerOn === true && timerTime >= 1000 && (\n//                     <button className=\"Button-stop\" onClick={this.stopTimer}>\n//                         Stop\n//                     </button>\n//                     )}\n//                     {timerOn === false &&\n//                     (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n//                         <button className=\"Button-start\" onClick={this.startTimer}>\n//                         Resume\n//                         </button>\n//                     )}\n            \n//                     {(timerOn === false || timerTime < 1000) &&\n//                     (timerStart !== timerTime && timerStart > 0) && (\n//                         <button className=\"Button-reset\" onClick={this.resetTimer}>\n//                         Reset\n//                         </button>\n//                     )}\n//                 </div>\n\n//                 <div className=\"container\">\n//                     <div \n//                     onClick={this.state.timerOn && this.shootHandler}\n//                     style={{padding: '0px', left, top, position: 'absolute'}}\n//                     >\n//                         <RedDot />\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//       }\n// }\n\n// export default Aim;\n\nimport React from \"react\";\nimport PlayAim from './PlayAim';\nimport {HashRouter, Route, Link} from 'react-router-dom';\nimport '../../App.css';\n\nimport Help from '../Help/Help';\n\nconst Aim = () => {\n    var helpText = \"After hitting Play button, you have 30 \\n\\nseconds to shoot targets. Try to shoot\\n\\n as many targets as possible.\\n\\n Good Luck!\"\n    var sourceName = '/Aim/';\n\n    return (\n        <HashRouter basename=\"/\">\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                            <h1>Aim Training</h1>\n                            <Link className=\"gameSetting\" to='/Aim/PlayAim/'>\n                                <h2>Play</h2>\n                            </Link>\n                    \n                            <Link className=\"gameSetting\" to='/Aim/Help/'>\n                                <h2>Help</h2>\n                            </Link>\n\n                            <Link className=\"gameSetting\" to='/'>\n                                <h2>Return</h2>\n                            </Link>\n                    </div>\n                    <Route path=\"/Aim/PlayAim\" component={PlayAim} />\n                    <Route \n                    path=\"/Aim/Help\" \n                    render={(props) => (\n                        <Help {...props} text={helpText} sourceName={sourceName} />\n                    )}\n                    />\n                </div>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default Aim;","import React from 'react';\n\nimport Track from './components/Track/Track';\nimport Aim from './components/Aim/Aim'\n// import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\n// const Ready = () => {\n//     return (\n//         <div className=\"outerContainer\">\n//             <div className=\"container\">\n//                 <h1>Aim Trainer</h1>\n//                 <Link to={'/Track'}>\n//                     <button className=\"gameSetting\">Track Training</button>\n//                 </Link>\n                \n//                 <Link to={'/Aim'}>\n//                     <button className=\"gameSetting\">Aim Training</button>\n//                 </Link>\n//             </div>\n//         </div>\n//     );\n// };\n// import RedDot from './components/Track/RedDot';\n\nconst App = () => {\n    return (\n        <HashRouter basename='/'>\n            <div>\n                <div className=\"outerContainer\">\n                    <div className=\"container\">\n                        <h1>Aim Trainer</h1>\n                            <Link className=\"gameSetting\" to='/Track'>\n                                <h2>Track Training</h2>\n                            </Link>\n                \n                            <Link className=\"gameSetting\" to='/Aim'>\n                                <h2>Aim Training</h2>\n                            </Link>\n                    </div>\n                </div>\n                <Route path=\"/Track\" component={Track} />\n                <Route path=\"/Aim\" component={Aim} />\n            </div>\n        </HashRouter>\n    )\n    // <Router>\n    //     <Route path=\"/\" exact component={Ready} />\n    //     <Route path=\"/Track\" component={Track} />\n    //     <Route path=\"/Aim\" component={Aim} />\n    // </Router>\n    \n};\n\n// class App extends Component {\n//     render() {\n//         return (\n//             <div >\n//                 {/* <Track /> */}\n//                 <Aim />\n//                 {/* <RedDot /> */}\n//             </div>\n//         )\n//     }\n// }\n\nexport default App;\n\n// export default class App extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <RedDot\n//                 src='./components/Track/red_dot.jpg'\n//                 />\n//             </div>\n//         )\n//     }\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}